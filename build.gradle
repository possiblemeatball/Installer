apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:6.0.3'
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://libraries.minecraft.net/"
    }
    flatDir {
        name "fileRepo"
        dirs "repo"
    }
}

group = 'net.possiblemeatball'
archivesBaseName = 'installer'
version = 'breadpack'
targetCompatibility = '1.8'
sourceCompatibility = '1.8'

dependencies {
    compile 'net.sf.jopt-simple:jopt-simple:4.5'
    compile 'net.sourceforge.argo:argo:3.7'
    compile 'com.google.guava:guava:14.0'
    compile 'org.tukaani:xz:1.3'
}


compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task fatJar(type: Jar, dependsOn: jar) {
    inputs.file jar.archivePath
    from(configurations.compile.collect { zipTree(it).matching { include '**/*.class' } })
    manifest { attributes 'Main-Class': 'net.possiblemeatball.breadpack.installer.main.InstallerMain' }
}

fatJar.doFirst {
    from zipTree(jar.archivePath)
}

task packerJar(type: Jar, dependsOn: jar) {
    doFirst {
        from zipTree(jar.archivePath)
    }
    classifier = 'packer'
    inputs.file jar.archivePath
    from(configurations.compile.collect { zipTree(it).matching { include '**/*.class' } })
    manifest { attributes 'Main-Class': 'net.minecraftforge.installer.LibraryPacker' }
}


task shrinkJar(type: proguard.gradle.ProGuardTask, dependsOn: jar) {
    inputs.file fatJar.archivePath
    ext {
        outDir = file("${buildDir}/proguard")
        obfuscatedJar = "${outDir}/${jar.baseName}.jar"
    }
    outDir.mkdirs()

    injars jar.archivePath
    outjars obfuscatedJar
    libraryjars configurations.compile

    // Automatically handle the Java version of this build.
    if (System.getProperty('java.version').startsWith('1.')) {
        // Before Java 9, the runtime classes were packaged in a single jar file.
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    } else {
        // As of Java 9, the runtime classes are packaged in modular jmod files.
        libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.getProperty('java.home')}/jmods/java.desktop.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.getProperty('java.home')}/jmods/java.logging.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.getProperty('java.home')}/jmods/jdk.unsupported.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
    }
    configuration 'proguard.pro'
}

task shrinkOutput(type: Jar, dependsOn: shrinkJar) {
    classifier = 'shrunk'
    from zipTree(shrinkJar.obfuscatedJar)
    manifest { attributes 'Main-Class': 'net.possiblemeatball.breadpack.installer.main.InstallerMain' }
}

artifacts {
    archives fatJar
    archives sourcesJar
    archives shrinkOutput
    archives packerJar
}

jar {
    classifier = 'thin'
    exclude 'argo/**'
    manifest { attributes 'Main-Class': 'net.possiblemeatball.breadpack.installer.main.InstallerMain' }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}
